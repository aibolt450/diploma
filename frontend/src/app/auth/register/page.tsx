'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Eye, EyeOff, Mail, Lock, User } from 'lucide-react'
import { useAuthStore } from '@/store/authStore'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import toast from 'react-hot-toast'

const registerSchema = z.object({
  fullName: z.string().min(2, '–ü–æ–≤–Ω–µ —ñ–º\'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏'),
  email: z.string().email('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏'),
  password: z.string().min(6, '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å",
  path: ["confirmPassword"],
})

type RegisterFormData = z.infer<typeof registerSchema>

export default function RegisterPage() {
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const { register: registerUser, isLoading } = useAuthStore()
  const router = useRouter()

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
  })

  const onSubmit = async (data: RegisterFormData) => {
    const { confirmPassword, ...registerData } = data
    const result = await registerUser(registerData)
    
    if (result.success) {
      if (result.requiresEmailConfirmation) {
        toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')
        // Show additional message about welcome email
        setTimeout(() => {
          toast('–í–∞–º —Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç!', {
            icon: 'üìß',
            duration: 3000
          })
        }, 1000)
      } else {
        toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.')
      }
      router.push('/auth/login')
    } else {
      toast.error(result.error || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <div className="mx-auto w-12 h-12 bg-primary-600 rounded-lg flex items-center justify-center">
            <span className="text-white font-bold text-xl">R</span>
          </div>
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–∞—à –∞–∫–∞—É–Ω—Ç
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            –ê–±–æ{' '}
            <Link
              href="/auth/login"
              className="font-medium text-primary-600 hover:text-primary-500"
            >
              —É–≤—ñ–π–¥—ñ—Ç—å –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
            </Link>
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              <Input
                {...register('fullName')}
                type="text"
                label="–ü–æ–≤–Ω–µ —ñ–º'—è"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è"
                error={errors.fullName?.message}
                leftIcon={<User className="w-4 h-4" />}
                autoComplete="name"
              />

              <Input
                {...register('email')}
                type="email"
                label="–ê–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É"
                error={errors.email?.message}
                leftIcon={<Mail className="w-4 h-4" />}
                autoComplete="email"
              />

              <Input
                {...register('password')}
                type={showPassword ? 'text' : 'password'}
                label="–ü–∞—Ä–æ–ª—å"
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å"
                error={errors.password?.message}
                leftIcon={<Lock className="w-4 h-4" />}
                rightIcon={
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? (
                      <EyeOff className="w-4 h-4" />
                    ) : (
                      <Eye className="w-4 h-4" />
                    )}
                  </button>
                }
                autoComplete="new-password"
              />

              <Input
                {...register('confirmPassword')}
                type={showConfirmPassword ? 'text' : 'password'}
                label="–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å"
                error={errors.confirmPassword?.message}
                leftIcon={<Lock className="w-4 h-4" />}
                rightIcon={
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    {showConfirmPassword ? (
                      <EyeOff className="w-4 h-4" />
                    ) : (
                      <Eye className="w-4 h-4" />
                    )}
                  </button>
                }
                autoComplete="new-password"
              />

              <Button
                type="submit"
                className="w-full"
                isLoading={isLoading}
                disabled={isLoading}
              >
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
              </Button>
            </form>
          </CardContent>
        </Card>

        <div className="text-center">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-sm text-blue-800">
              <strong>üìß –ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</strong>
            </p>
            <ul className="text-sm text-blue-700 mt-2 space-y-1">
              <li>‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –≤—ñ—Ç–∞–ª—å–Ω–∏–π –ª–∏—Å—Ç –Ω–∞ –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É</li>
              <li>‚Ä¢ –ú–æ–∂–ª–∏–≤–æ, –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É</li>
              <li>‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º", —è–∫—â–æ –Ω–µ –±–∞—á–∏—Ç–µ –ª–∏—Å—Ç–∞</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}