import { GoogleGenerativeAI } from '@google/generative-ai'

class AIService {
  constructor(logger) {
    this.logger = logger
    this.geminiApiKey = process.env.GEMINI_API_KEY
    this.edamamFoodAppId = process.env.EDAMAM_APP_FOOD_ID
    this.edamamFoodAppKey = process.env.EDAMAM_APP_FOOD_KEY
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini AI
    if (this.geminiApiKey) {
      this.gemini = new GoogleGenerativeAI(this.geminiApiKey);
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ Gemini API –∫–ª—é—á–∞
  async validateGeminiApiKey() {
    try {
      if (!this.geminiApiKey) {
        return {
          success: false,
          error: 'GEMINI_API_KEY –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ .env —Ñ–∞–π–ª—ñ'
        }
      }

      // –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–æ Gemini API
      const testUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${this.geminiApiKey}`
      
      const response = await fetch(testUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: 'Test'
            }]
          }]
        })
      })

      if (response.ok) {
        this.logger.info('Gemini API key is valid')
        return {
          success: true,
          message: 'Gemini API –∫–ª—é—á –≤–∞–ª—ñ–¥–Ω–∏–π'
        }
      } else {
        const errorData = await response.json()
        this.logger.error('Gemini API key validation failed', { 
          status: response.status,
          error: errorData 
        })
        
        let errorMessage = '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π Gemini API –∫–ª—é—á'
        if (response.status === 400) {
          errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞'
        } else if (response.status === 403) {
          errorMessage = 'API –∫–ª—é—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É'
        } else if (response.status === 429) {
          errorMessage = '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤'
        }
        
        return {
          success: false,
          error: errorMessage,
          details: errorData
        }
      }
    } catch (error) {
      this.logger.error('Error validating Gemini API key', { 
        error: error.message,
        stack: error.stack
      })
      
      return {
        success: false,
        error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ API –∫–ª—é—á–∞',
        details: error.message
      }
    }
  }

  async searchIngredients(query, limit = 5) {
    try {
      if (!this.edamamFoodAppId || !this.edamamFoodAppKey) {
        this.logger.error('Edamam API credentials missing')
        return {
          success: false,
          error: 'Edamam API credentials missing'
        }
      }

      const url = `https://api.edamam.com/api/food-database/v2/parser?app_id=${this.edamamFoodAppId}&app_key=${this.edamamFoodAppKey}&ingr=${encodeURIComponent(query)}&limit=${limit}`
      
      this.logger.info('Searching ingredients with Edamam API', { query, limit })
      const response = await fetch(url)
      const data = await response.json()
      
      if (!response.ok) {
        this.logger.error('Edamam API error', { status: response.status, message: data.message })
        throw new Error(`Edamam API error: ${data.message || 'Unknown error'}`)
      }
      
      const foods = data.parsed?.map(item => ({
        foodId: item.food.foodId,
        label: item.food.label,
        category: item.food.category,
        image: item.food.image,
        nutrients: item.food.nutrients
      })) || []

      this.logger.info('Ingredients search successful', { count: foods.length })
      return {
        success: true,
        foods
      }
    } catch (error) {
      this.logger.error('Error searching ingredients', { error: error.message })
      return {
        success: false,
        error: error.message
      }
    }
  }

  async getRecipeSuggestions(ingredients, preferences = '') {
    try {
      if (!this.geminiApiKey) {
        this.logger.error('Gemini API key missing')
        return {
          success: false,
          error: 'AI —á–∞—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
        }
      }

      this.logger.info('Getting recipe suggestions with Gemini', { 
        ingredientsCount: ingredients.length,
        hasPreferences: !!preferences
      })

      const systemPrompt = `–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –ø—Ä–æ–ø–æ–Ω—É—î —Ä–µ—Ü–µ–ø—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤. 
–ó–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö, –ª–µ–≥–∫–∏—Ö –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç–∞—Ö, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –Ω–∞–¥–∞–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏.
–§–æ—Ä–º–∞—Ç—É–π —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É markdown –∑ —á—ñ—Ç–∫–∏–º–∏ —Ä–æ–∑–¥—ñ–ª–∞–º–∏:
1. –ù–∞–∑–≤–∞ —Ä–µ—Ü–µ–ø—Ç—É (—è–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
3. –°–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ (–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é)
4. –ü–æ–∫—Ä–æ–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
5. –ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ

–Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –¥—ñ—î—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –∞–±–æ –æ–±–º–µ–∂–µ–Ω–Ω—è, –∞–¥–∞–ø—Ç—É–π —Å–≤–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.
–Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –¥—É–∂–µ –æ–±–º–µ–∂–µ–Ω–∏–π, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø—Ä–æ—Å—Ç—ñ —Ä–µ—Ü–µ–ø—Ç–∏ –∞–±–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫—ñ–ª—å–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.`

      const userMessage = `–£ –º–µ–Ω–µ —î —Ü—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: ${ingredients.join(', ')}. ${preferences ? `–ú–æ—ó –ø–µ—Ä–µ–≤–∞–≥–∏: ${preferences}.` : ''} –©–æ —è –º–æ–∂—É –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏?`

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π API –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
      const response = await this.gemini.models.generateContent({
        model: "gemini-2.5-flash",
        contents: `${systemPrompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${userMessage}`
      })
      
      const suggestion = response.text

      this.logger.info('Gemini recipe suggestion generated successfully', { 
        responseLength: suggestion.length 
      })

      return {
        success: true,
        suggestion
      }
    } catch (error) {
      // –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
      this.logger.error('Error getting recipe suggestions from Gemini', { 
        error: error.message,
        stack: error.stack,
        name: error.name,
        status: error.status,
        statusText: error.statusText,
        response: error.response?.data || error.response,
        fullError: JSON.stringify(error, Object.getOwnPropertyNames(error))
      })
      
      // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç—É –ø–æ–º–∏–ª–∫—É
      return {
        success: false,
        error: 'AI —á–∞—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
      }
    }
  }

  getFallbackSuggestion(ingredients, preferences = '') {
    const fallbackRecipes = [
      {
        title: "üç≥ –ü—Ä–æ—Å—Ç–∏–π –æ–º–ª–µ—Ç",
        description: "–®–≤–∏–¥–∫–∏–π —Ç–∞ –ø–æ–∂–∏–≤–Ω–∏–π —Å–Ω—ñ–¥–∞–Ω–æ–∫ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤",
        time: "10 —Ö–≤–∏–ª–∏–Ω",
        difficulty: "–õ–µ–≥–∫–æ"
      },
      {
        title: "ü•ó –°–≤—ñ–∂–∏–π —Å–∞–ª–∞—Ç",
        description: "–ó–¥–æ—Ä–æ–≤–∏–π —Å–∞–ª–∞—Ç –∑ –Ω–∞—è–≤–Ω–∏—Ö –æ–≤–æ—á—ñ–≤ —Ç–∞ –∑–µ–ª–µ–Ω—ñ",
        time: "5 —Ö–≤–∏–ª–∏–Ω",
        difficulty: "–î—É–∂–µ –ª–µ–≥–∫–æ"
      },
      {
        title: "üçù –ü–∞—Å—Ç–∞ –∑ –ø—Ä–æ—Å—Ç–∏–º —Å–æ—É—Å–æ–º",
        description: "–ö–ª–∞—Å–∏—á–Ω–∞ –ø–∞—Å—Ç–∞ –∑ –±–∞–∑–æ–≤–∏–º–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏",
        time: "15 —Ö–≤–∏–ª–∏–Ω",
        difficulty: "–õ–µ–≥–∫–æ"
      }
    ]

    const randomRecipe = fallbackRecipes[Math.floor(Math.random() * fallbackRecipes.length)]
    
    const suggestion = `# ${randomRecipe.title}

${randomRecipe.description}

**–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:** ${randomRecipe.time}  
**–†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:** ${randomRecipe.difficulty}

## –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:
${ingredients.map(ing => `- ${ing}`).join('\n')}

## –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
1. –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –≤—Å—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
2. –°–ª—ñ–¥—É–π—Ç–µ –±–∞–∑–æ–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏
3. –ê–¥–∞–ø—Ç—É–π—Ç–µ –ø—ñ–¥ —Å–≤–æ—ó —Å–º–∞–∫–∏

*–ü—Ä–∏–º—ñ—Ç–∫–∞: AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –¶–µ –±–∞–∑–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.*`

    return {
      success: true,
      suggestion
    }
  }
}

export default AIService;