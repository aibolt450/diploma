import { GoogleGenerativeAI } from '@google/generative-ai';

class AIService {
  constructor(logger) {
    this.logger = logger
    this.geminiApiKey = process.env.GEMINI_API_KEY
    this.edamamFoodAppId = process.env.EDAMAM_APP_FOOD_ID
    this.edamamFoodAppKey = process.env.EDAMAM_APP_FOOD_KEY
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini AI
    if (this.geminiApiKey) {
      this.gemini = new GoogleGenerativeAI(this.geminiApiKey);
    }
  }

  async searchIngredients(query, limit = 5) {
    try {
      if (!this.edamamFoodAppId || !this.edamamFoodAppKey) {
        this.logger.error('Edamam API credentials missing')
        return {
          success: false,
          error: 'Edamam API credentials missing'
        }
      }

      const url = `https://api.edamam.com/api/food-database/v2/parser?app_id=${this.edamamFoodAppId}&app_key=${this.edamamFoodAppKey}&ingr=${encodeURIComponent(query)}&limit=${limit}`
      
      this.logger.info('Searching ingredients with Edamam API', { query, limit })
      const response = await fetch(url)
      const data = await response.json()
      
      if (!response.ok) {
        this.logger.error('Edamam API error', { status: response.status, message: data.message })
        throw new Error(`Edamam API error: ${data.message || 'Unknown error'}`)
      }
      
      const foods = data.parsed?.map(item => ({
        foodId: item.food.foodId,
        label: item.food.label,
        category: item.food.category,
        image: item.food.image,
        nutrients: item.food.nutrients
      })) || []

      this.logger.info('Ingredients search successful', { count: foods.length })
      return {
        success: true,
        foods
      }
    } catch (error) {
      this.logger.error('Error searching ingredients', { error: error.message })
      return {
        success: false,
        error: error.message
      }
    }
  }

  async getRecipeSuggestions(ingredients, preferences = '') {
    try {
      if (!this.geminiApiKey) {
        this.logger.error('Gemini API key missing')
        return this.getFallbackSuggestion(ingredients, preferences)
      }

      this.logger.info('Getting recipe suggestions with Gemini', { 
        ingredientsCount: ingredients.length,
        hasPreferences: !!preferences
      })

      const systemPrompt = `–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π –ø—Ä–æ–ø–æ–Ω—É—î —Ä–µ—Ü–µ–ø—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤. 
–ó–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö, –ª–µ–≥–∫–∏—Ö –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç–∞—Ö, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –Ω–∞–¥–∞–Ω—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏.
–§–æ—Ä–º–∞—Ç—É–π —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É markdown –∑ —á—ñ—Ç–∫–∏–º–∏ —Ä–æ–∑–¥—ñ–ª–∞–º–∏:
1. –ù–∞–∑–≤–∞ —Ä–µ—Ü–µ–ø—Ç—É (—è–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
3. –°–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ (–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é)
4. –ü–æ–∫—Ä–æ–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
5. –ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ

–Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –¥—ñ—î—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –∞–±–æ –æ–±–º–µ–∂–µ–Ω–Ω—è, –∞–¥–∞–ø—Ç—É–π —Å–≤–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.
–Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –¥—É–∂–µ –æ–±–º–µ–∂–µ–Ω–∏–π, –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –ø—Ä–æ—Å—Ç—ñ —Ä–µ—Ü–µ–ø—Ç–∏ –∞–±–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫—ñ–ª—å–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.`

      const userMessage = `–£ –º–µ–Ω–µ —î —Ü—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: ${ingredients.join(', ')}. ${preferences ? `–ú–æ—ó –ø–µ—Ä–µ–≤–∞–≥–∏: ${preferences}.` : ''} –©–æ —è –º–æ–∂—É –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏?`

      const model = this.gemini.getGenerativeModel({ model: 'gemini-pro' })
      const prompt = `${systemPrompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${userMessage}`
      
      const result = await model.generateContent(prompt)
      const response = await result.response
      const suggestion = response.text()

      this.logger.info('Gemini recipe suggestion generated successfully', { 
        responseLength: suggestion.length 
      })

      return {
        success: true,
        suggestion
      }
    } catch (error) {
      this.logger.error('Error getting recipe suggestions from Gemini', { error: error.message })
      
      // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      return this.getFallbackSuggestion(ingredients, preferences)
    }
  }

  getFallbackSuggestion(ingredients, preferences) {
    const suggestion = `# –ë–∞–∑–æ–≤—ñ —Ä–µ—Ü–µ–ø—Ç–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤\n\n## –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: ${ingredients.join(', ')}\n\n${preferences ? `## –í–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è: ${preferences}\n\n` : ''}## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:\n\n### ü•ó –ü—Ä–æ—Å—Ç–∏–π —Å–∞–ª–∞—Ç\n**–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:** 10 —Ö–≤–∏–ª–∏–Ω  \n**–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:** –õ–µ–≥–∫–æ\n\n**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:**\n1. –ü–æ–º–∏–π—Ç–µ —Ç–∞ –Ω–∞—Ä—ñ–∑–∞–π—Ç–µ —Å–≤—ñ–∂—ñ –æ–≤–æ—á—ñ\n2. –ó–º—ñ—à–∞–π—Ç–µ –≤ —Å–∞–ª–∞—Ç–Ω–∏—Ü—ñ\n3. –î–æ–¥–∞–π—Ç–µ –æ–ª—ñ—é, —Å—ñ–ª—å —Ç–∞ —Å–ø–µ—Ü—ñ—ó –∑–∞ —Å–º–∞–∫–æ–º\n4. –ü–µ—Ä–µ–º—ñ—à–∞–π—Ç–µ —Ç–∞ –ø–æ–¥–∞–≤–∞–π—Ç–µ\n\n### üç≥ –°–º–∞–∂–µ–Ω—ñ –æ–≤–æ—á—ñ\n**–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:** 15 —Ö–≤–∏–ª–∏–Ω  \n**–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:** –õ–µ–≥–∫–æ\n\n**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:**\n1. –†–æ–∑—ñ–≥—Ä—ñ–π—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥—É –∑ –æ–ª—ñ—î—é\n2. –î–æ–¥–∞–π—Ç–µ –Ω–∞—Ä—ñ–∑–∞–Ω—ñ –æ–≤–æ—á—ñ\n3. –°–º–∞–∂—Ç–µ 10-12 —Ö–≤–∏–ª–∏–Ω, –ø–æ–º—ñ—à—É—é—á–∏\n4. –ü—Ä–∏–ø—Ä–∞–≤—Ç–µ —Å—ñ–ª–ª—é —Ç–∞ —Å–ø–µ—Ü—ñ—è–º–∏\n\n### üç≤ –û–≤–æ—á–µ–≤–∏–π —Å—É–ø\n**–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:** 30 —Ö–≤–∏–ª–∏–Ω  \n**–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:** –°–µ—Ä–µ–¥–Ω—å–æ\n\n**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:**\n1. –ù–∞—Ä—ñ–∑–∞–π—Ç–µ –æ–≤–æ—á—ñ –∫—É–±–∏–∫–∞–º–∏\n2. –û–±—Å–º–∞–∂—Ç–µ –≤ –∫–∞—Å—Ç—Ä—É–ª—ñ –∑ –æ–ª—ñ—î—é\n3. –î–æ–¥–∞–π—Ç–µ –≤–æ–¥—É —Ç–∞ –≤–∞—Ä—ñ—Ç—å 20 —Ö–≤–∏–ª–∏–Ω\n4. –ü—Ä–∏–ø—Ä–∞–≤—Ç–µ –∑–∞ —Å–º–∞–∫–æ–º\n\n*–ü—Ä–∏–º—ñ—Ç–∫–∞: AI —Å–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –¶–µ –±–∞–∑–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.*`
    
    this.logger.info('Using fallback recipe suggestion')
    
    return {
      success: true,
      suggestion
    }
  }
}

export default AIService;